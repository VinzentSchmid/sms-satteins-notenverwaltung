// <auto-generated />
using System;
using BackendRestAPI.Persistence.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace BackendRestAPI.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20240102225532_AdjustTeacherIdentitySchemav3")]
    partial class AdjustTeacherIdentitySchemav3
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("BackendRestAPI.Domain.Models.Assignment", b =>
                {
                    b.Property<int>("AssignmentPk")
                        .HasColumnType("integer")
                        .HasColumnName("assignment_pk");

                    b.Property<string>("AssignmentType")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("assignment_type");

                    b.Property<DateOnly>("CreationDate")
                        .HasColumnType("date")
                        .HasColumnName("creation_date");

                    b.Property<int>("ReachablePoints")
                        .HasColumnType("integer")
                        .HasColumnName("reachable_points");

                    b.Property<string>("Semester")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("semester");

                    b.Property<int?>("SubjectFk")
                        .HasColumnType("integer")
                        .HasColumnName("subject_fk");

                    b.HasKey("AssignmentPk")
                        .HasName("assignment_pk");

                    b.HasIndex("SubjectFk");

                    b.ToTable("assignment", (string)null);
                });

            modelBuilder.Entity("BackendRestAPI.Domain.Models.Class", b =>
                {
                    b.Property<int>("PkClass")
                        .HasColumnType("integer")
                        .HasColumnName("pk_class");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("name");

                    b.Property<DateOnly>("Year")
                        .HasColumnType("date")
                        .HasColumnName("year");

                    b.HasKey("PkClass")
                        .HasName("class_pk");

                    b.ToTable("class_table", (string)null);
                });

            modelBuilder.Entity("BackendRestAPI.Domain.Models.Subject", b =>
                {
                    b.Property<int>("PkSubject")
                        .HasColumnType("integer")
                        .HasColumnName("pk_subject");

                    b.Property<int>("ClassFk")
                        .HasColumnType("integer")
                        .HasColumnName("class_fk");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("name");

                    b.HasKey("PkSubject")
                        .HasName("subject_pk");

                    b.HasIndex("ClassFk");

                    b.ToTable("subject", (string)null);
                });

            modelBuilder.Entity("BackendRestAPI.Domain.Models.Teacher", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer")
                        .HasColumnName("Id");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("email");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("FirstTitle")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("first_title");

                    b.Property<string>("LastTitle")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("last_title");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("password");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("UserName");

                    b.HasKey("Id")
                        .HasName("Id");

                    b.ToTable("teachers", (string)null);
                });

            modelBuilder.Entity("BackendRestAPI.Models.ClassTeacher", b =>
                {
                    b.Property<int>("ClassTeacherPk")
                        .HasColumnType("integer")
                        .HasColumnName("class_teacher_pk");

                    b.Property<int?>("ClassFk")
                        .HasColumnType("integer")
                        .HasColumnName("class_fk");

                    b.Property<int?>("TeacherFk")
                        .HasColumnType("integer")
                        .HasColumnName("teacher_fk");

                    b.HasKey("ClassTeacherPk")
                        .HasName("class_teacher_pk");

                    b.HasIndex("ClassFk");

                    b.HasIndex("TeacherFk");

                    b.ToTable("class_teacher", (string)null);
                });

            modelBuilder.Entity("BackendRestAPI.Models.Student", b =>
                {
                    b.Property<int>("PkStudent")
                        .HasColumnType("integer")
                        .HasColumnName("pk_student");

                    b.Property<int?>("FkClass")
                        .HasColumnType("integer")
                        .HasColumnName("fk_class");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("name");

                    b.HasKey("PkStudent")
                        .HasName("student_pk");

                    b.HasIndex("FkClass");

                    b.ToTable("student", (string)null);
                });

            modelBuilder.Entity("BackendRestAPI.Models.StudentAssignment", b =>
                {
                    b.Property<int>("StudentAssignmentPk")
                        .HasColumnType("integer")
                        .HasColumnName("student_assignment_pk");

                    b.Property<int>("AssignmentFk")
                        .HasColumnType("integer")
                        .HasColumnName("assignment_fk");

                    b.Property<int>("Points")
                        .HasColumnType("integer")
                        .HasColumnName("points");

                    b.Property<int>("StudentFk")
                        .HasColumnType("integer")
                        .HasColumnName("student_fk");

                    b.HasKey("StudentAssignmentPk")
                        .HasName("student_assignment_pk");

                    b.HasIndex("AssignmentFk");

                    b.HasIndex("StudentFk");

                    b.ToTable("student_assignment", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("BackendRestAPI.Domain.Models.Assignment", b =>
                {
                    b.HasOne("BackendRestAPI.Domain.Models.Subject", "SubjectFkNavigation")
                        .WithMany("Assignments")
                        .HasForeignKey("SubjectFk")
                        .HasConstraintName("subject_fk");

                    b.Navigation("SubjectFkNavigation");
                });

            modelBuilder.Entity("BackendRestAPI.Domain.Models.Subject", b =>
                {
                    b.HasOne("BackendRestAPI.Domain.Models.Class", "ClassFkNavigation")
                        .WithMany("Subjects")
                        .HasForeignKey("ClassFk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("class_fk");

                    b.Navigation("ClassFkNavigation");
                });

            modelBuilder.Entity("BackendRestAPI.Models.ClassTeacher", b =>
                {
                    b.HasOne("BackendRestAPI.Domain.Models.Class", "ClassFkNavigation")
                        .WithMany("ClassTeachers")
                        .HasForeignKey("ClassFk")
                        .HasConstraintName("class_fk");

                    b.HasOne("BackendRestAPI.Domain.Models.Teacher", "TeacherFkNavigation")
                        .WithMany("ClassTeachers")
                        .HasForeignKey("TeacherFk")
                        .HasConstraintName("teacher_fk");

                    b.Navigation("ClassFkNavigation");

                    b.Navigation("TeacherFkNavigation");
                });

            modelBuilder.Entity("BackendRestAPI.Models.Student", b =>
                {
                    b.HasOne("BackendRestAPI.Domain.Models.Class", "FkClassNavigation")
                        .WithMany("Students")
                        .HasForeignKey("FkClass")
                        .HasConstraintName("class_fk");

                    b.Navigation("FkClassNavigation");
                });

            modelBuilder.Entity("BackendRestAPI.Models.StudentAssignment", b =>
                {
                    b.HasOne("BackendRestAPI.Domain.Models.Assignment", "AssignmentFkNavigation")
                        .WithMany("StudentAssignments")
                        .HasForeignKey("AssignmentFk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("assignment_fk");

                    b.HasOne("BackendRestAPI.Models.Student", "StudentFkNavigation")
                        .WithMany("StudentAssignments")
                        .HasForeignKey("StudentFk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("student_fk");

                    b.Navigation("AssignmentFkNavigation");

                    b.Navigation("StudentFkNavigation");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("BackendRestAPI.Domain.Models.Teacher", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("BackendRestAPI.Domain.Models.Teacher", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BackendRestAPI.Domain.Models.Teacher", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("BackendRestAPI.Domain.Models.Teacher", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BackendRestAPI.Domain.Models.Assignment", b =>
                {
                    b.Navigation("StudentAssignments");
                });

            modelBuilder.Entity("BackendRestAPI.Domain.Models.Class", b =>
                {
                    b.Navigation("ClassTeachers");

                    b.Navigation("Students");

                    b.Navigation("Subjects");
                });

            modelBuilder.Entity("BackendRestAPI.Domain.Models.Subject", b =>
                {
                    b.Navigation("Assignments");
                });

            modelBuilder.Entity("BackendRestAPI.Domain.Models.Teacher", b =>
                {
                    b.Navigation("ClassTeachers");
                });

            modelBuilder.Entity("BackendRestAPI.Models.Student", b =>
                {
                    b.Navigation("StudentAssignments");
                });
#pragma warning restore 612, 618
        }
    }
}
